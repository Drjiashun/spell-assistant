# Backward Elimination
# Backward Elimination Feature Selection
# Backward Elimination Feature Selection For Classification
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import log_loss
from scipy.stats import chi2
np.random.seed(42)
num_samples = 500
spectrum_length = 200
n_classes = 3
X = np.random.randn(num_samples, spectrum_length)
y = np.random.randint(0, n_classes, num_samples)
def backward_elimination(X, y, p_threshold=0.05):
    """
    Perform Backward Elimination for feature selection in classification tasks
    """
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    n_features = X_scaled.shape[1]
    selected_features = list(range(n_features))
    while len(selected_features) > 0:
        X_current = X_scaled[:, selected_features]
        model = LogisticRegression(solver='lbfgs', max_iter=1000)
        model.fit(X_current, y)
        n = len(y)
        X_with_const = np.column_stack([np.ones(n), X_current])
        y_pred_proba = model.predict_proba(X_current)
        ll_full = -log_loss(y, y_pred_proba, normalize=False)
        coef = np.concatenate([model.intercept_, model.coef_[0]])
        hessian = np.dot(X_with_const.T * y_pred_proba[:, 0] * y_pred_proba[:, 1], X_with_const)
        try:
            cov_matrix = np.linalg.inv(hessian)
        except np.linalg.LinAlgError:
            break
        se = np.sqrt(np.diag(cov_matrix)[1:])
        wald_stats = model.coef_[0] / se
        p_values = 2 * (1 - chi2.cdf(wald_stats ** 2, df=1))
        max_p_idx = np.argmax(p_values) if len(p_values) > 0 else -1
        max_p_value = p_values[max_p_idx] if max_p_idx != -1 else 0
        if max_p_value < p_threshold or len(selected_features) == 0:
            break
        selected_features.pop(max_p_idx)

    return selected_features
Threshold = 0.05
selected_features = backward_elimination(X, y, p_threshold=Threshold)
print(f"Selected feature indices: {selected_features}")
print(f"Number of selected features: {len(selected_features)}")