# Moving Window PLS
# MWPLS
# Moving Window Partial Least Squares
# Moving Window Partial Least Squares Feature Selection For Regression
# MWPLS Feature Selection For Regression
import numpy as np
from sklearn.cross_decomposition import PLSRegression
from sklearn.model_selection import cross_val_predict, KFold
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X = np.random.randn(num_samples, spectrum_length)
y = np.random.uniform(0, 10, num_samples)
def calculate_rmsecv(
        X: np.ndarray,
        y: np.ndarray,
        n_components: int,
        cv_folds: int,
        random_state: int = 42
):
    """
    Calculate RMSECV for a given feature window using PLS regression.
    """
    if X.shape[1] == 0 or n_components <= 0:
        return np.inf, 0
    max_possible_comp = min(X.shape[1], X.shape[0] - int(np.ceil(X.shape[0] / cv_folds)))
    actual_n_components = min(n_components, max_possible_comp)
    if actual_n_components <= 0:
        return np.inf, 0
    model = PLSRegression(n_components=actual_n_components)
    try:
        y_pred_cv = cross_val_predict(
            model, X, y, cv=KFold(n_splits=cv_folds, shuffle=True, random_state=random_state)
        )
        rmsecv = np.sqrt(mean_squared_error(y, y_pred_cv))
    except Exception as e:
        rmsecv = np.inf
        actual_n_components = 0
    return rmsecv, actual_n_components

def mwpls_feature_selection(
        X: np.ndarray,
        y: np.ndarray,
        window_size: int,
        step_size: int = 1,
        max_components: int = 5,
        cv_folds: int = 5,
        selection_factor: float = 1.05,
        random_state: int = 42
):
    """
    Perform Moving Window Partial Least Squares (MWPLS) feature selection for regression tasks.
    """
    scaler_X = StandardScaler()
    scaler_y = StandardScaler()
    X_scaled = scaler_X.fit_transform(X)
    y_scaled = scaler_y.fit_transform(y.reshape(-1, 1)).ravel()
    window_rmsecv_results = []
    window_indices_list = []
    window_ncomp_used = []
    for start_index in range(0, X.shape[1] - window_size + 1, step_size):
        end_index = start_index + window_size
        window_indices = list(range(start_index, end_index))
        X_window = X_scaled[:, window_indices]
        rmsecv, ncomp_used = calculate_rmsecv(X_window, y_scaled, max_components, cv_folds, random_state)
        window_rmsecv_results.append(rmsecv)
        window_indices_list.append(window_indices)
        window_ncomp_used.append(ncomp_used)
    min_rmsecv = np.min([r for r in window_rmsecv_results if np.isfinite(r)])
    rmsecv_threshold = min_rmsecv * selection_factor if np.isfinite(min_rmsecv) else np.inf
    selected_windows_indices = []
    selected_features_set = set()
    for i, rmsecv in enumerate(window_rmsecv_results):
        if np.isfinite(rmsecv) and rmsecv <= rmsecv_threshold:
            selected_windows_indices.append(i)
            selected_features_set.update(window_indices_list[i])
            start_idx, end_idx = window_indices_list[i][0], window_indices_list[i][-1]
    final_selected_indices = np.array(sorted(list(selected_features_set)))
    selected_features = X[:, final_selected_indices] if len(final_selected_indices) > 0 else np.array([[]])
    return selected_features, final_selected_indices, window_rmsecv_results, window_indices_list, window_ncomp_used

window_size=15
step_size=1
max_components=5
cv_folds=5
selection_factor=1
selected_features, selected_indices, rmsecv_results, indices_list, ncomp_used = mwpls_feature_selection(
        X, y,
        window_size=window_size,
        step_size=step_size,
        max_components=max_components,
        cv_folds=cv_folds,
        selection_factor=selection_factor,
        random_state=42
    )
# Print selected features results
print("\n--- Selected Features Results ---")
print(f"Selected features shape: {selected_features.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")