# Recursive Feature Elimination
# RFE Feature selection
# Recursive Feature selection
# Recursive Feature selection For Classification
import numpy as np
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 500
spectrum_length = 200
n_classes = 3
X = np.random.randn(num_samples, spectrum_length)
y = np.random.randint(0, n_classes, num_samples)
def rfe_feature_selection_classification(
        X: np.ndarray,
        y: np.ndarray,
        n_features_to_select: int = None,
        step = 1,
        max_iter: int = 1000
):
    """
    Perform Recursive Feature Elimination (RFE) for classification tasks.
    """
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    try:
        estimator = LogisticRegression(
            solver='lbfgs',
            max_iter=max_iter,
            random_state=42,
            n_jobs=-1  # Use all available cores
        )
        rfe = RFE(
            estimator=estimator,
            n_features_to_select=n_features_to_select,
            step=step
        )
        rfe.fit(X_scaled, y)
        selected_features = X[:, rfe.support_] if np.any(rfe.support_) else np.array([])
        selected_indices = np.where(rfe.support_)[0]
        ranking = rfe.ranking_
        return selected_features, selected_indices, ranking
    except Exception as e:
        return np.array([]), np.array([]), np.ones(X.shape[1], dtype=int)
n_features_to_select=50
step=1
max_iter=1000
selected_features, selected_indices, ranking = rfe_feature_selection_classification(
        X, y,
        n_features_to_select=n_features_to_select,
        step=step,
        max_iter=max_iter
)
print("--- Recursive Feature Elimination (RFE) Results (Classification) ---")
print(f"Original data shape: {X.shape}")
print(f"Selected features shape: {selected_features.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")
if len(selected_indices) == 0:
    print("Warning: No features were selected. Consider increasing n_features_to_select or adjusting step.")