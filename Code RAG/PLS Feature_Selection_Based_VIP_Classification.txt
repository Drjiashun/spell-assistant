# PLS Feature Selection
# PLS VIP
# PLS-VIP
# Partial Least Squares VIP Scores
# Partial Least Squares VIP Scores For Classification
# PLS Feature Selection Based VIP
import numpy as np
from sklearn.cross_decomposition import PLSRegression
from sklearn.preprocessing import StandardScaler, LabelEncoder
np.random.seed(42)
num_samples = 500
spectrum_length = 200
n_classes = 3
X = np.random.randn(num_samples, spectrum_length)
y = np.random.randint(0, n_classes, num_samples)
def calculate_vip_scores(model: PLSRegression) -> np.ndarray:
    """
    Calculate Variable Importance in Projection (VIP) scores for a fitted PLS model.
    """
    try:
        t = model.x_scores_  # Latent scores
        w = model.x_weights_  # Weight vectors
        q = model.y_loadings_  # Y loadings
        p, h = w.shape
        vips = np.zeros(p)
        s = np.diag(t.T @ t @ q.T @ q).reshape(h, -1)
        total_s = np.sum(s)
        for i in range(p):
            weight = np.array([(w[i, j] / np.linalg.norm(w[:, j])) ** 2 for j in range(h)])
            vips[i] = np.sqrt(p * np.sum(s.T * weight) / total_s)
        return vips
    except Exception as e:
        return np.zeros(p)

def pls_vip_feature_selection_classification(
        X: np.ndarray,
        y: np.ndarray,
        n_components: int = 3,
        vip_threshold: float = 1.0,
        min_features: int = 1
):
    """
    Perform feature selection using PLS VIP scores for classification tasks (PLS-DA).
    """
    scaler_X = StandardScaler()
    X_scaled = scaler_X.fit_transform(X)
    le = LabelEncoder()
    y_encoded = le.fit_transform(y)
    y_pls = y_encoded.astype(float) if len(le.classes_) == 2 else np.eye(len(le.classes_))[y_encoded]
    try:
        pls = PLSRegression(n_components=n_components)
        pls.fit(X_scaled, y_pls)
        vip_scores = calculate_vip_scores(pls)
        selected_indices = np.where(vip_scores >= vip_threshold)[0]
        if len(selected_indices) == 0:
            selected_indices = np.argsort(vip_scores)[-min_features:]
        selected_features = X[:, selected_indices] if len(selected_indices) > 0 else np.array([])
        return selected_indices, vip_scores
    except Exception as e:
        return np.array([]), np.zeros(X.shape[1])
n_components = 5
vip_threshold = 1.0
min_features = 1
selected_indices, vip_scores = pls_vip_feature_selection_classification(
        X, y,
        n_components=n_components,
        vip_threshold=vip_threshold,
        min_features=min_features
)
print("--- PLS VIP Feature Selection Results (Classification) ---")
print(f"Original data shape: {X.shape}")
print(f"Selected features shape: {selected_features.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")
if len(selected_indices) == 0:
    print("Warning: No features were selected. Consider lowering vip_threshold or increasing min_features.")