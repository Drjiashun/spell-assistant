# Spectral Space Transformation
# SST Model Transfer
# Spectral Space Transformation Model Transfer
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import warnings
n_wavelengths = 50       # Number of spectral points (wavelengths)
n_samples_transfer = 60  # Number of transfer samples
n_samples_new = 20       # Number of new samples measured only on the slave device
print(f"Number of wavelengths: {n_wavelengths}")
print(f"Number of transfer samples: {n_samples_transfer}")
print(f"Number of new samples: {n_samples_new}")
X_master_transfer = np.random.rand(n_samples_transfer, n_wavelengths)
X_slave_transfer = np.random.rand(n_samples_transfer, n_wavelengths)
X_slave_new = np.random.rand(n_samples_new, n_wavelengths)
Y_transfer = np.random.rand(n_samples_transfer, 1) * 100 # Scale Y for example
Y_new_hypothetical = np.random.rand(n_samples_new, 1) * 100
print(f"\nMaster transfer spectra shape (X_master_transfer): {X_master_transfer.shape}")
print(f"Slave transfer spectra shape (X_slave_transfer): {X_slave_transfer.shape}")
print(f"Slave new spectra shape (X_slave_new): {X_slave_new.shape}")
print(f"Transfer target variable shape (Y_transfer): {Y_transfer.shape}")
print(f"Hypothetical new target shape (Y_new_hypothetical): {Y_new_hypothetical.shape}")
def spectral_space_transformation_matrix(X_master, X_slave):
    """
    Calculates the Spectral Space Transformation (SST) matrix T.
    """
    print("\nCalculating SST transformation matrix T...")
    try:
        T = np.linalg.pinv(X_master) @ X_slave
        print(f"Calculated T matrix shape: {T.shape}")
        if T.shape[0] != X_master.shape[1] or T.shape[1] != X_slave.shape[1]:
             warnings.warn(f"Warning: T matrix shape ({T.shape}) might not be square as expected!", UserWarning)
        return T
    except np.linalg.LinAlgError as e:
        print(f"Error calculating T matrix: {e}. Check input matrices.")
        raise # Re-raise the error
T_sst = spectral_space_transformation_matrix(X_master_transfer, X_slave_transfer)
print("\nCalculating the inverse (pseudo-inverse) of T for correction...")
try:
    T_sst_inv = np.linalg.pinv(T_sst)
    print(f"Calculated T_inv matrix shape: {T_sst_inv.shape}")
except np.linalg.LinAlgError as e:
    print(f"Error calculating pseudo-inverse of T: {e}. Cannot proceed with correction.")
    exit() # Stop execution if inverse fails
print("\nApplying SST inverse transformation to new slave data...")
X_slave_corrected = X_slave_new @ T_sst_inv
print(f"Original new slave data shape (X_slave_new): {X_slave_new.shape}")
print(f"SST Corrected new slave data shape (X_slave_corrected): {X_slave_corrected.shape}")
print("\nTraining prediction model on *original* Master transfer data...")
model_master = LinearRegression()
model_master.fit(X_master_transfer, Y_transfer)
print("Master model trained.")
print("\nPredicting results for new samples using the trained Master model...")
Y_pred_original = model_master.predict(X_slave_new)
Y_pred_corrected = model_master.predict(X_slave_corrected)
print(f"Predictions on original slave data shape: {Y_pred_original.shape}")
print(f"Predictions on SST corrected slave data shape: {Y_pred_corrected.shape}")
print("\n--- Prediction Results (Example) ---")
for i in range(min(5, n_samples_new)):
    print(f"Sample {i+1}:")
    print(f"  Hypothetical True Y: {Y_new_hypothetical[i, 0]:.2f}")
    print(f"  Predicted Y (Original Slave Data): {Y_pred_original[i, 0]:.2f}")
    print(f"  Predicted Y (SST Corrected Slave Data): {Y_pred_corrected[i, 0]:.2f}")
mse_original = mean_squared_error(Y_new_hypothetical, Y_pred_original)
mse_corrected = mean_squared_error(Y_new_hypothetical, Y_pred_corrected)
print("\n--- Prediction Performance (MSE vs Hypothetical Y) ---")
print(f"MSE using Original Slave Data: {mse_original:.4f}")
print(f"MSE using SST Corrected Slave Data: {mse_corrected:.4f}")
plt.figure(figsize=(12, 10)) # Adjusted figure size
wavelengths_idx = np.arange(n_wavelengths) # Use index
plt.subplot(2, 2, 1)
sample_idx_transfer = 0
plt.plot(wavelengths_idx, X_master_transfer[sample_idx_transfer, :], label=f'Master Transfer Sample {sample_idx_transfer+1}')
plt.plot(wavelengths_idx, X_slave_transfer[sample_idx_transfer, :], label=f'Slave Transfer Sample {sample_idx_transfer+1}', linestyle='--')
plt.title('Transfer Sample Spectra Example')
plt.xlabel('Wavelength Index')
plt.ylabel('Random Intensity')
plt.legend()
plt.subplot(2, 2, 2)
sample_idx_new = 0
plt.plot(wavelengths_idx, X_slave_new[sample_idx_new, :], label=f'Original Slave New Sample {sample_idx_new+1}')
plt.plot(wavelengths_idx, X_slave_corrected[sample_idx_new, :], label=f'Corrected Slave New Sample {sample_idx_new+1} (SST)', linewidth=2)
plt.title('New Sample: Original vs. Corrected (SST)')
plt.xlabel('Wavelength Index')
plt.ylabel('Random Intensity')
plt.legend()
plt.subplot(2, 2, 3)
sample_indices = np.arange(n_samples_new)
plt.scatter(sample_indices, Y_new_hypothetical, label='Hypothetical True Y', marker='o', alpha=0.7)
plt.scatter(sample_indices, Y_pred_original, label='Predicted Y (Original Slave)', marker='x', alpha=0.7)
plt.scatter(sample_indices, Y_pred_corrected, label='Predicted Y (SST Corrected)', marker='+', alpha=0.9, s=80)
plt.title('Prediction Comparison for New Samples')
plt.xlabel('New Sample Index')
plt.ylabel('Predicted/Hypothetical Y Value')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.subplot(2, 2, 4)
min_val = min(Y_new_hypothetical.min(), Y_pred_original.min(), Y_pred_corrected.min()) * 0.9
max_val = max(Y_new_hypothetical.max(), Y_pred_original.max(), Y_pred_corrected.max()) * 1.1
plt.plot([min_val, max_val], [min_val, max_val], 'k--', label='Ideal (y=x)') # Identity line
plt.scatter(Y_new_hypothetical, Y_pred_original, label=f'Original (MSE={mse_original:.2f})', marker='x', alpha=0.7)
plt.scatter(Y_new_hypothetical, Y_pred_corrected, label=f'SST Corrected (MSE={mse_corrected:.2f})', marker='+', alpha=0.9, s=80)
plt.title('Predicted vs. Hypothetical Y')
plt.xlabel('Hypothetical True Y')
plt.ylabel('Predicted Y')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.axis('equal')
plt.xlim(min_val, max_val)
plt.ylim(min_val, max_val)
plt.tight_layout()
plt.show()
print("\nCode execution finished.")