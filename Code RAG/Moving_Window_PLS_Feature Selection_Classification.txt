# Moving Window PLS
# MWPLS
# Moving Window Partial Least Squares
# Moving Window Partial Least Squares Feature Selection For Classification
# MWPLS Feature Selection For Classification
import numpy as np
from sklearn.cross_decomposition import PLSRegression
from sklearn.model_selection import cross_val_predict, KFold
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
np.random.seed(42)
num_samples = 500
spectrum_length = 200
n_classes = 3
X = np.random.randn(num_samples, spectrum_length)
y = np.random.randint(0, n_classes, num_samples)
def calculate_classification_score(
        X: np.ndarray,
        y: np.ndarray,
        n_components: int,
        cv_folds: int,
        random_state: int = 42
):
    """
    Calculate cross-validated classification accuracy for a given feature window using PLS-DA.
    """
    if X.shape[1] == 0 or n_components <= 0:
        return 0.0, 0
    max_possible_comp = min(X.shape[1], X.shape[0] - int(np.ceil(X.shape[0] / cv_folds)))
    actual_n_components = min(n_components, max_possible_comp)
    if actual_n_components <= 0:
        return 0.0, 0
    model = PLSRegression(n_components=actual_n_components)
    try:
        y_pred_cv = cross_val_predict(
            model, X, y, cv=KFold(n_splits=cv_folds, shuffle=True, random_state=random_state)
        )
        y_pred_classes = np.sign(y_pred_cv) if y.shape[1] == 1 else np.argmax(y_pred_cv, axis=1)
        y_true_classes = np.argmax(y, axis=1) if y.ndim > 1 else y
        accuracy = accuracy_score(y_true_classes, y_pred_classes)
    except Exception as e:
        accuracy = 0.0
        actual_n_components = 0
    return accuracy, actual_n_components

def mwpls_feature_selection_classification(
        X: np.ndarray,
        y: np.ndarray,
        window_size: int,
        step_size: int = 1,
        max_components: int = 5,
        cv_folds: int = 5,
        selection_factor: float = 0.95,
        random_state: int = 42
):
    """
    Perform Moving Window Partial Least Squares (MWPLS) feature selection for classification tasks.
    """
    scaler_X = StandardScaler()
    X_scaled = scaler_X.fit_transform(X)
    le = LabelEncoder()
    y_encoded = le.fit_transform(y)
    y_pls = y_encoded.astype(float) if len(le.classes_) == 2 else np.eye(len(le.classes_))[y_encoded]
    window_accuracy_results = []
    window_indices_list = []
    window_ncomp_used = []
    selected_windows_info = []
    for start_index in range(0, X.shape[1] - window_size + 1, step_size):
        end_index = start_index + window_size
        window_indices = list(range(start_index, end_index))
        X_window = X_scaled[:, window_indices]
        accuracy, ncomp_used = calculate_classification_score(X_window, y_pls, max_components, cv_folds, random_state)
        window_accuracy_results.append(accuracy)
        window_indices_list.append(window_indices)
        window_ncomp_used.append(ncomp_used)
    max_accuracy = np.max([a for a in window_accuracy_results if np.isfinite(a)])
    accuracy_threshold = max_accuracy * selection_factor if np.isfinite(max_accuracy) else 0.0
    selected_windows_indices = []
    selected_features_set = set()
    for i, accuracy in enumerate(window_accuracy_results):
        if np.isfinite(accuracy) and accuracy >= accuracy_threshold:
            selected_windows_indices.append(i)
            selected_features_set.update(window_indices_list[i])
            selected_windows_info.append({
                'start_idx': window_indices_list[i][0],
                'end_idx': window_indices_list[i][-1],
                'accuracy': accuracy
            })
    final_selected_indices = np.array(sorted(list(selected_features_set)))
    selected_features = X[:, final_selected_indices] if len(final_selected_indices) > 0 else np.array([[]])
    return selected_features, final_selected_indices, window_accuracy_results, window_indices_list, window_ncomp_used

window_size=15
step_size=1
max_components=5
cv_folds=5
selection_factor=0.95
selected_features, selected_indices, accuracy_results, indices_list, ncomp_used = mwpls_feature_selection_classification(
        X, y,
        window_size=window_size,
        step_size=step_size,
        max_components=max_components,
        cv_folds=cv_folds,
        selection_factor= selection_factor,
        random_state=42
)
# Print selected features results
print("\n--- Selected Features Results ---")
print(f"Selected features shape: {selected_features.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")