# Forward Selection
# Forward Feature Selection
# Forward Feature Selection For Regression
import numpy as np
from sklearn.feature_selection import SequentialFeatureSelector
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X = np.random.randn(num_samples, spectrum_length)
y = np.random.uniform(0, 10, num_samples)
def forward_selection_regression(
        X: np.ndarray,
        y: np.ndarray,
        n_features_to_select = 'auto',
        scoring: str = 'neg_mean_squared_error',
        cv: int = 5
):
    """
    Perform forward feature selection for regression tasks using SequentialFeatureSelector.
    """
    scaler_X = StandardScaler()
    scaler_y = StandardScaler()
    X_scaled = scaler_X.fit_transform(X)
    y_scaled = scaler_y.fit_transform(y.reshape(-1, 1)).ravel()
    try:
        estimator = LinearRegression(n_jobs=-1)  # Use all available cores
        sfs = SequentialFeatureSelector(
            estimator,
            n_features_to_select=n_features_to_select,
            direction='forward',
            scoring=scoring,
            cv=cv,
            n_jobs=-1  # Parallelize cross-validation
        )
        sfs.fit(X_scaled, y_scaled)
        selected_indices = sfs.get_support(indices=True)
        return selected_indices
    except Exception as e:
        return np.array([]), np.array([])
n_features_to_select = 50
cv=5
selected_indices = forward_selection_regression(
        X, y,
        n_features_to_select = n_features_to_select,
        scoring='neg_mean_squared_error',
        cv=cv
)
print("--- Forward Selection Results (Regression) ---")
print(f"Original data shape: {X.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")
if len(selected_indices) == 0:
    print("Warning: No features were selected. Consider adjusting n_features_to_select or scoring.")