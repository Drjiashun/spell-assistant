# Ridge Regression
import numpy as np
from sklearn.linear_model import Ridge
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X_all = np.random.randn(num_samples, spectrum_length)
y_true_all = np.random.uniform(0, 10, num_samples)
scaler = StandardScaler()
X_all_scaled = scaler.fit_transform(X_all)

X_train, X_test, y_train, y_test_true = train_test_split(
    X_all_scaled, y_true_all, test_size=0.3, random_state=42
)
ridge_alpha = 1.0
ridge_model = Ridge(alpha=ridge_alpha)
ridge_model.fit(X_train, y_train)

y_pred_train = ridge_model.predict(X_train)
y_pred_test = ridge_model.predict(X_test)

print(f"Shape of X_train: {X_train.shape}")
print(f"Shape of y_train_scaled: {y_train.shape}")
print(f"Shape of X_test: {X_test.shape}")
print(f"Shape of y_test_scaled_true: {y_test_true.shape}")
print(f"Shape of y_pred_test: {y_pred_test.shape}")

# force import
from sklearn.metrics import mean_squared_error, r2_score
mse_train = mean_squared_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)
print(f"  MSE: {mse_train:.4f}")
print(f"  R^2: {r2_train:.4f}")

mse_test = mean_squared_error(y_test_true, y_pred_test)
r2_test = r2_score(y_test_true, y_pred_test)
print(f"  MSE: {mse_test:.4f}")
print(f"  R^2: {r2_test:.4f}")
