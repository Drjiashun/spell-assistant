# C value feature selection
# C value
# C value feature selection for Regression
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score, KFold
import warnings

np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X = np.random.randn(num_samples, spectrum_length)
y = np.random.uniform(0, 10, num_samples)
print(f"Input data shape (X): {X.shape}")
print(f"Target data shape (y): {y.shape}")
scaler_X = StandardScaler()
X_scaled = scaler_X.fit_transform(X)
print("X data standardized.")
def calculate_correlation_coefficients(X, y):
    """ Calculates Pearson correlation between each feature in X and target y  for regression tasks. """
    n_samples, n_features = X.shape
    correlations = np.zeros(n_features)
    if n_samples < 2:
        warnings.warn("Not enough samples (< 2) to calculate correlation.", RuntimeWarning)
        return correlations # Return zeros
    y_mean = np.mean(y)
    y_centered = y - y_mean
    y_norm = np.sqrt(np.sum(y_centered**2))
    if y_norm < 1e-12:
         warnings.warn("Target variable y has near-zero variance. Correlation is undefined.", RuntimeWarning)
         return correlations # Return zeros

    print("Calculating correlation coefficients...")
    for j in range(n_features):
        x_j = X[:, j]
        x_j_mean = np.mean(x_j)
        x_j_centered = x_j - x_j_mean
        x_j_norm = np.sqrt(np.sum(x_j_centered**2))
        if x_j_norm < 1e-12:
            correlations[j] = 0.0 # Assign 0 if feature has zero variance
        else:
            correlations[j] = np.dot(x_j_centered, y_centered) / (x_j_norm * y_norm)
    return correlations

correlation_coeffs = calculate_correlation_coefficients(X_scaled, y)
abs_correlation_coeffs = np.abs(correlation_coeffs)
N_FEATURES_TO_SELECT = 50 # Select top N features with highest abs correlation
if N_FEATURES_TO_SELECT >= spectrum_length:
    selected_features_corr = np.arange(spectrum_length) # Select all if N >= total
    print(f"Selecting all {spectrum_length} features as N_FEATURES_TO_SELECT >= spectrum_length")
elif N_FEATURES_TO_SELECT > 0 :
    sorted_indices = np.argsort(abs_correlation_coeffs)[::-1] # Sort desc by abs corr
    selected_features_corr = sorted_indices[:N_FEATURES_TO_SELECT]
    corr_threshold_value = abs_correlation_coeffs[selected_features_corr[-1]]
    print(f"Selecting top {N_FEATURES_TO_SELECT} features.")
    print(f"Effective correlation threshold: >= {corr_threshold_value:.4f}")
else:
    selected_features_corr = np.array([], dtype=int) # Select none if N <= 0
    corr_threshold_value = np.inf
    print("N_FEATURES_TO_SELECT is zero or negative. No features selected.")

print("\n--- Correlation Coefficient (C-Value) Selection Results ---")
print(f"Number of selected features: {len(selected_features_corr)}")
print(f"Selected feature indices: {np.sort(selected_features_corr)}")

plt.figure(figsize=(12, 6))
plt.bar(np.arange(spectrum_length), abs_correlation_coeffs, color='dodgerblue', label='Abs. Correlation |C|')
if N_FEATURES_TO_SELECT > 0 and N_FEATURES_TO_SELECT < spectrum_length:
    plt.axhline(corr_threshold_value, color='k', linestyle='--', label=f'Threshold (|C| >= {corr_threshold_value:.2f})')
if len(selected_features_corr) > 0:
    selected_mask = np.zeros_like(abs_correlation_coeffs)
    selected_mask[selected_features_corr] = abs_correlation_coeffs[selected_features_corr]
    plt.stem(np.arange(spectrum_length), selected_mask, linefmt='g-', markerfmt='go', basefmt=' ',
             label=f'Selected Features')
plt.xlabel('Feature Index')
plt.ylabel('Absolute Correlation Coefficient |C| with y')
plt.title(f'Correlation-Based Variable Selection (|C|)')
plt.legend()
plt.grid(True, axis='y', linestyle=':')
plt.ylim(bottom=-0.1) # Adjust y-limit to show true features marker
plt.show()
