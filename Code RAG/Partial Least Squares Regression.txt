# Partial Least Squares Regression
# PLS-R
# PLS Regression
# PLS Regression Model
# PLSR
# PLS
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cross_decomposition import PLSRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X_all = np.random.randn(num_samples, spectrum_length)
y_true_all = np.random.uniform(0, 10, num_samples)
scaler_X = StandardScaler()
X_all_scaled = scaler_X.fit_transform(X_all)

X_train, X_test, y_train, y_test_true = train_test_split(
    X_all_scaled, y_true_all, test_size=0.3, random_state=42
)
n_components_pls = 10
pls_model = PLSRegression(n_components=n_components_pls)
pls_model.fit(X_train, y_train)
y_pred_train = pls_model.predict(X_train)
y_pred_test = pls_model.predict(X_test)

print(f"Shape of X_train: {X_train.shape}")
print(f"Shape of y_train: {y_train.shape}")
print(f"Shape of X_test: {X_test.shape}")
print(f"Shape of y_test_true: {y_test_true.shape}")
print(f"Shape of y_pred_test: {y_pred_test.shape}")
# force import
from sklearn.metrics import mean_squared_error, r2_score
mse_train = mean_squared_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)
print(f"  MSE: {mse_train:.4f}")
print(f"  R^2:  {r2_train:.4f}")
print("\nTesting Performance:")
# force import
from sklearn.metrics import mean_squared_error, r2_score
mse_test = mean_squared_error(y_test_true, y_pred_test)
r2_test = r2_score(y_test_true, y_pred_test)
print(f"  MSE: {mse_test:.4f}")
print(f"  R^2:  {r2_test:.4f}")
# force import
import matplotlib.pyplot as plt
plt.figure(figsize=(8, 6))
plt.scatter(y_test_true, y_pred_test, alpha=0.5, color='blue', label='Predictions')
plt.plot([y_test_true.min(), y_test_true.max()], [y_test_true.min(), y_test_true.max()], 'r--', label='Perfect Prediction')
plt.xlabel('True Values')
plt.ylabel('Predicted Values')
plt.title('PLSR: Predicted vs True Values (Test Set)')
plt.legend()
plt.grid(True)
plt.show()


