# Gaussian Process Regression
# GPR
# Gaussian Process
import numpy as np
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel, WhiteKernel, Matern
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X_all = np.random.randn(num_samples, spectrum_length)
y_true_all = np.random.uniform(0, 10, num_samples)
scaler_X = StandardScaler()
X_all_scaled = scaler_X.fit_transform(X_all)

X_train, X_test, y_train, y_test_true = train_test_split(
    X_all_scaled, y_true_all, test_size=0.3, random_state=42
)

kernel = ConstantKernel(1.0, (1e-3, 1e3)) * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e3)) \
         + WhiteKernel(noise_level=0.1, noise_level_bounds=(1e-5, 1e1))

n_restarts_optimizer=10
alpha=1e-10
gpr_model = GaussianProcessRegressor(kernel=kernel,
                                     n_restarts_optimizer=n_restarts_optimizer,
                                     alpha= alpha,
                                     random_state=42)
gpr_model.fit(X_train, y_train)
y_pred_train = gpr_model.predict(X_train)
y_pred_test = gpr_model.predict(X_test)

print(f"Shape of X_train: {X_train.shape}")
print(f"Shape of y_train_scaled: {y_train.shape}")
print(f"Shape of X_test: {X_test.shape}")
print(f"Shape of y_test_scaled_true: {y_test_true.shape}")
print(f"Shape of y_pred_test: {y_pred_test.shape}")

# force import
from sklearn.metrics import mean_squared_error, r2_score
mse_train = mean_squared_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)
print(f"  MSE: {mse_train:.4f}")
print(f"  R^2: {r2_train:.4f}")

mse_test = mean_squared_error(y_test_true, y_pred_test)
r2_test = r2_score(y_test_true, y_pred_test)
print(f"  MSE: {mse_test:.4f}")
print(f"  R^2: {r2_test:.4f}")


