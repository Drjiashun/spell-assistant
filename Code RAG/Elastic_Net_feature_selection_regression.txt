# Elastic Net Feature Selection For Regression
# Elastic Net Feature Selection
import numpy as np
from sklearn.linear_model import ElasticNet
from sklearn.feature_selection import SelectFromModel
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X = np.random.randn(num_samples, spectrum_length)
y = np.random.uniform(0, 10, num_samples)
def elastic_net_feature_selection_regression(
        X: np.ndarray,
        y: np.ndarray,
        alpha: float = 0.1,
        l1_ratio: float = 0.5,
        max_iter: int = 1000,
        threshold = 'mean'
):
    """
    Perform feature selection for regression tasks using Elastic Net regularization.
    """
    scaler_X = StandardScaler()
    scaler_y = StandardScaler()
    X_scaled = scaler_X.fit_transform(X)
    y_scaled = scaler_y.fit_transform(y.reshape(-1, 1)).ravel()
    try:
        estimator = ElasticNet(
            alpha=alpha,
            l1_ratio=l1_ratio,
            max_iter=max_iter,
            random_state=42
        )
        selector = SelectFromModel(estimator=estimator, threshold=threshold)
        selector.fit(X_scaled, y_scaled)
        selected_indices = selector.get_support(indices=True)
        coef = selector.estimator_.coef_
        return selected_indices, coef
    except Exception as e:
        return np.array([]), np.array([]), np.zeros(X.shape[1])

alpha=0.1
l1_ratio=0.5
max_iter=1000
selected_indices, coef = elastic_net_feature_selection_regression(
        X, y,
        alpha=alpha,
        l1_ratio= l1_ratio,
        max_iter=max_iter,
        threshold='mean'
)
print("--- Elastic Net Feature Selection Results (Regression) ---")
print(f"Original data shape: {X.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")
if len(selected_indices) == 0:
    print("Warning: No features were selected. Consider decreasing alpha or adjusting threshold.")