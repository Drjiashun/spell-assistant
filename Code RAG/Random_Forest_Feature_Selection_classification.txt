# Random Forest Feature Importance
# Random Forest Feature Selection
# Random Forest Feature Selection for classification
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
np.random.seed(42)
num_samples = 500
spectrum_length = 200
n_classes = 3
X = np.random.randn(num_samples, spectrum_length)
y = np.random.randint(0, n_classes, num_samples)
def RandomForest_feature_selection(
        X: np.ndarray,
        y: np.ndarray,
        n_estimators: int = 50,
        threshold = 'mean',
        max_features = None
):
    """
    Perform feature selection based on RandomForest_feature_selection feature importance (Random Forest).
    """
    estimator = RandomForestClassifier (
        n_estimators=n_estimators,
        random_state=42,
        n_jobs=-1  # Use all available cores
    )
    try:
        selector = SelectFromModel(
            estimator=estimator,
            threshold=threshold,
            max_features=max_features
        )
        selector.fit(X, y)
        selected_indices = selector.get_support(indices=True)
        selected_features = X[:, selected_indices] if len(selected_indices) > 0 else np.array([])
        importances = selector.estimator_.feature_importances_
        threshold_used = selector.threshold_
        return selected_indices, importances, threshold_used
    except Exception as e:
        return np.array([]), np.zeros(X.shape[1]), 0.0
n_estimators=50
threshold='mean'
max_features=50
selected_indices, importances, threshold_used = RandomForest_feature_selection(
        X, y,
        n_estimators=n_estimators,
        threshold=threshold,
        max_features=max_features
)

print("--- Tree-based Feature Importance Selection Results ---")
print(f"Original data shape: {X.shape}")
print(f"Selected features shape: {selected_features.shape}")
print(f"Selected feature indices: {selected_indices.tolist()}")
print(f"Threshold used: {threshold_used:.4f}")
if len(selected_indices) == 0:
    print("Warning: No features were selected. Consider lowering threshold or increasing max_features.")