# Transformer
# Transformer classification
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, average_precision_score, roc_curve, precision_recall_curve

num_samples = 1000
spectrum_length = 200
num_classes = 3
data = np.random.randn(num_samples, spectrum_length)
labels = np.random.randint(0, num_classes, num_samples)
unique_classes = np.unique(labels)
target_names = [f'Class_{i}' for i in unique_classes]
scaler_X = StandardScaler()
data = scaler_X.fit_transform(data)
X_temp, test_data, y_temp, test_labels = train_test_split(
    data, labels, test_size=0.2, random_state=42, stratify=labels
)
train_data, val_data, train_labels, val_labels = train_test_split(
    X_temp, y_temp, test_size=0.2, random_state=42, stratify=y_temp
)
# Convert data shape to transformer input form,data:(num_samples,spectrum_length,1)
train_data = np.reshape(train_data,(train_data.shape[0],train_data.shape[1],1))
test_data = np.reshape(test_data,(test_data.shape[0],test_data.shape[1],1))
val_data = np.reshape(val_data,(val_data.shape[0],val_data.shape[1],1))

class SpectrumDataset(Dataset):
    def __init__(self, data, labels):
        self.data = torch.tensor(data, dtype=torch.float32)
        self.labels = torch.tensor(labels, dtype=torch.long)

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        return self.data[idx], self.labels[idx]
train_dataset = SpectrumDataset(train_data, train_labels)
val_dataset = SpectrumDataset(val_data, val_labels)
test_dataset = SpectrumDataset(test_data, test_labels)
batch_size = 32
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)
class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=200):
        super(PositionalEncoding, self).__init__()
        self.encoding = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-torch.log(torch.tensor(10000.0)) / d_model))
        self.encoding[:, 0::2] = torch.sin(position * div_term)
        self.encoding[:, 1::2] = torch.cos(position * div_term)
        self.encoding = self.encoding.unsqueeze(0)

    def forward(self, x):
        return x + self.encoding[:, :x.size(1), :].to(x.device)

class SpectrumTransformerClassifier(nn.Module):
    def __init__(self, input_dim, seq_len, d_model, nhead, num_layers, dim_feedforward, num_classes, dropout):
        super(SpectrumTransformerClassifier, self).__init__()
        self.input_proj = nn.Linear(input_dim, d_model)
        self.positional_encoding = PositionalEncoding(d_model, max_len=seq_len)
        encoder_layer = nn.TransformerEncoderLayer(
            d_model=d_model, nhead=nhead, dim_feedforward=dim_feedforward, dropout=dropout, batch_first=True
        )
        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)
        self.feature_weights = nn.Parameter(torch.ones(seq_len, d_model))

        self.classifier = nn.Sequential(
            nn.Linear(d_model, 128),
            nn.ReLU(),
            nn.Dropout(dropout),
            nn.Linear(128, num_classes)
        )

    def forward(self, x):

        x = self.input_proj(x)
        x = self.positional_encoding(x)
        x = self.transformer_encoder(x)

        x = (x * self.feature_weights).sum(dim=1)
        x = self.classifier(x)
        return x
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print("Using device:", device)
d_model=64
nhead=8
num_layers=2
dim_feedforward=64
lr=0.001
model = SpectrumTransformerClassifier(
    input_dim=train_data.shape[2], seq_len=spectrum_length, d_model=d_model, nhead=nhead, num_layers=num_layers, dim_feedforward=dim_feedforward, num_classes=num_classes, dropout=0.1
).to(device)
loss_function = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=lr)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=5)

num_epochs = 1000
patience = 20
best_val_loss = float('inf')
epochs_no_improve = 0

train_losses = []
val_losses = []
for epoch in range(num_epochs):
    model.train()
    train_loss = 0
    for batch_data, batch_labels in train_loader:
        batch_data, batch_labels = batch_data.to(device), batch_labels.to(device)
        optimizer.zero_grad()
        predictions = model(batch_data)
        loss = loss_function(predictions, batch_labels)
        loss.backward()
        optimizer.step()
        train_loss += loss.item()
    train_loss /= len(train_loader)
    train_losses.append(train_loss)

    model.eval()
    val_loss = 0
    with torch.no_grad():
        for batch_data, batch_labels in val_loader:
            batch_data, batch_labels = batch_data.to(device), batch_labels.to(device)
            predictions = model(batch_data)
            loss = loss_function(predictions, batch_labels)
            val_loss += loss.item()
    val_loss /= len(val_loader)
    val_losses.append(val_loss)

    scheduler.step(val_loss)

    if val_loss < best_val_loss:
        best_val_loss = val_loss
        epochs_no_improve = 0

    else:
        epochs_no_improve += 1
        if epochs_no_improve >= patience:
            print(f"Early stopping triggered after {epoch + 1} epochs")
            break

    print(f"Epoch {epoch + 1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, LR: {optimizer.param_groups[0]['lr']:.6f}")

model.eval()

all_preds = []
all_labels = []
all_probs = []
test_loss = 0
with torch.no_grad():
    for batch_data, batch_labels in test_loader:
        batch_data, batch_labels = batch_data.to(device), batch_labels.to(device)
        predictions = model(batch_data)
        loss = loss_function(predictions, batch_labels)
        test_loss += loss.item()
        probs = torch.softmax(predictions, dim=1)
        preds = torch.argmax(probs, dim=1)
        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(batch_labels.cpu().numpy())
        all_probs.extend(probs.cpu().numpy())
test_loss /= len(test_loader)

all_preds = np.array(all_preds)
all_labels = np.array(all_labels)
all_probs = np.array(all_probs)

# import
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, average_precision_score, roc_curve, precision_recall_curve
accuracy = (all_preds == all_labels).mean() * 100
auc_scores = [roc_auc_score((all_labels == i).astype(int), all_probs[:, i]) for i in range(num_classes)]
mean_auc = np.mean(auc_scores)
aupr_scores = [average_precision_score((all_labels == i).astype(int), all_probs[:, i]) for i in range(num_classes)]
mean_aupr = np.mean(aupr_scores)

print(f"Test Loss: {test_loss:.4f}")
print(f"Test Accuracy: {accuracy:.2f}%")
print(f"Mean AUC (One-vs-Rest): {mean_auc:.4f}")
print(f"Mean AUPR (One-vs-Rest): {mean_aupr:.4f}")
# import
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 5))
plt.plot(train_losses, label='Train Loss')
plt.plot(val_losses, label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()
plt.grid()
plt.show()

cm = confusion_matrix(all_labels, all_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
disp.plot(cmap='Blues')
plt.title('Confusion Matrix')
plt.show()

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
for i in range(num_classes):
    true_binary = (all_labels == i).astype(int)
    fpr, tpr, _ = roc_curve(true_binary, all_probs[:, i])
    plt.plot(fpr, tpr, label=f'{target_names[i]} (AUC = {auc_scores[i]:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.grid()

plt.subplot(1, 2, 2)
for i in range(num_classes):
    true_binary = (all_labels == i).astype(int)
    precision, recall, _ = precision_recall_curve(true_binary, all_probs[:, i])
    plt.plot(recall, precision, label=f'{target_names[i]} (AUPR = {aupr_scores[i]:.2f})')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.legend()
plt.grid()
plt.tight_layout()
plt.show()