# CNN regression
# Convolutional Neural Network regression
# CNN

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from scipy.stats import pearsonr, spearmanr
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
data = np.random.randn(num_samples, spectrum_length)
targets = np.random.uniform(0, 10, num_samples)
scaler_X = StandardScaler()
data = scaler_X.fit_transform(data)

X_temp, test_data, y_temp, test_targets = train_test_split(
    data, targets, test_size=0.2, random_state=42
)
train_data, val_data, train_targets, val_targets = train_test_split(
    X_temp, y_temp, test_size=0.2, random_state=42
)
# Convert data shape and target shape to cnn input form,targets:(num_samples,1),data:(num_samples,1,spectrum_length)
train_targets=train_targets.reshape(-1, 1)
test_targets=test_targets.reshape(-1, 1)
val_targets=val_targets.reshape(-1, 1)
train_data = np.reshape(train_data,(train_data.shape[0],1,train_data.shape[1]))
test_data = np.reshape(test_data,(test_data.shape[0],1,test_data.shape[1]))
val_data = np.reshape(val_data,(val_data.shape[0],1,val_data.shape[1]))

class SpectrumDataset(Dataset):
    def __init__(self, data, targets):
        self.data = torch.tensor(data, dtype=torch.float32)
        self.targets = torch.tensor(targets, dtype=torch.float32)

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        return self.data[idx], self.targets[idx]
train_dataset = SpectrumDataset(train_data, train_targets)
val_dataset = SpectrumDataset(val_data, val_targets)
test_dataset = SpectrumDataset(test_data, test_targets)
batch_size = 32
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

class SpectrumCNN(nn.Module):
    def __init__(self, input_dim, input_length):
        super(SpectrumCNN, self).__init__()
        self.conv1 = nn.Conv1d(input_dim, 16, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm1d(16)
        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm1d(32)
        self.pool = nn.MaxPool1d(2)
        self.relu = nn.ReLU()
        self.input_length = input_length
        self.flattened_size = None
        self.fc1 = None
        self.fc2 = nn.Linear(128, 1)

    def forward(self, x):
        if self.flattened_size is None:
            temp = self.pool(self.relu(self.bn1(self.conv1(x))))
            temp = self.pool(self.relu(self.bn2(self.conv2(temp))))
            self.flattened_size = temp.view(temp.size(0), -1).size(1)
            self.fc1 = nn.Linear(self.flattened_size, 128).to(x.device)

        x = self.pool(self.relu(self.bn1(self.conv1(x))))
        x = self.pool(self.relu(self.bn2(self.conv2(x))))
        x = x.view(-1, self.flattened_size)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
print("Using device:", device)

model = SpectrumCNN(input_dim=train_data.shape[1],input_length=spectrum_length).to(device)
loss_function = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.005)
scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=5)

num_epochs = 1000
patience = 20
best_val_loss = float('inf')
epochs_no_improve = 0

train_losses = []
val_losses = []

for epoch in range(num_epochs):
    model.train()
    train_loss = 0
    for batch_data, batch_targets in train_loader:
        batch_data, batch_targets = batch_data.to(device), batch_targets.to(device)
        optimizer.zero_grad()
        predictions = model(batch_data)
        loss = loss_function(predictions.squeeze(), batch_targets.squeeze())
        loss.backward()
        optimizer.step()
        train_loss += loss.item()
    train_loss /= len(train_loader)
    train_losses.append(train_loss)

    model.eval()
    val_loss = 0
    with torch.no_grad():
        for batch_data, batch_targets in val_loader:
            batch_data, batch_targets = batch_data.to(device), batch_targets.to(device)
            predictions = model(batch_data)
            loss = loss_function(predictions.squeeze(), batch_targets.squeeze())
            val_loss += loss.item()
    val_loss /= len(val_loader)
    val_losses.append(val_loss)

    scheduler.step(val_loss)

    if val_loss < best_val_loss:
        best_val_loss = val_loss
        epochs_no_improve = 0

    else:
        epochs_no_improve += 1
        if epochs_no_improve >= patience:
            print(f"Early stopping triggered after {epoch + 1} epochs")
            break

    print(f"Epoch {epoch + 1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, LR: {optimizer.param_groups[0]['lr']:.6f}")
model.eval()

all_preds = []
all_targets = []
test_loss = 0
with torch.no_grad():
    for batch_data, batch_targets in test_loader:
        batch_data, batch_targets = batch_data.to(device), batch_targets.to(device)
        predictions = model(batch_data)
        loss = loss_function(predictions.squeeze(), batch_targets.squeeze())
        test_loss += loss.item()
        all_preds.extend(predictions.cpu().numpy())
        all_targets.extend(batch_targets.cpu().numpy())
test_loss /= len(test_loader)
all_preds = np.array(all_preds)
all_targets = np.array(all_targets)
# Must import again
from sklearn.metrics import r2_score
r2 = r2_score(all_targets.squeeze(), all_preds.squeeze())
# Must import again
from scipy.stats import pearsonr, spearmanr
pearson_corr, _ = pearsonr(all_targets.squeeze(), all_preds.squeeze())
spearman_corr, _ = spearmanr(all_targets.squeeze(), all_preds.squeeze())
print(f"Test Loss (MSE): {test_loss:.4f}")
print(f"Pearson Correlation: {pearson_corr:.4f}")
print(f"Spearman Correlation: {spearman_corr:.4f}")
print(f"RÂ² Score: {r2:.4f}")
# Must import again
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 5))
plt.plot(train_losses, label='Train Loss')
plt.plot(val_losses, label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss (MSE)')
plt.title('Training and Validation Loss')
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(10, 5))
plt.scatter(all_targets, all_preds, alpha=0.5)
plt.plot([all_targets.min(), all_targets.max()], [all_targets.min(), all_targets.max()], 'r--', label='Perfect Prediction')
plt.xlabel('True Targets')
plt.ylabel('Predicted Targets')
plt.title('Predicted vs. True Targets')
plt.legend()
plt.grid()
plt.show()