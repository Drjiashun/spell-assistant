# LightGBM regression
# LightGBM
import numpy as np
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
np.random.seed(42)
num_samples = 1000
spectrum_length = 300
X_all = np.random.randn(num_samples, spectrum_length)
y_all = np.random.uniform(0, 10, num_samples)
scaler = StandardScaler()
X_all_scaled = scaler.fit_transform(X_all)
X_train, X_test, y_train, y_test = train_test_split(
    X_all_scaled, y_all, test_size=0.3, random_state=42
)
lgbm_n_estimators = 500
lgbm_learning_rate = 0.1
lgbm_max_depth = -1  # No limit
lgbm_num_leaves = 31  # Default
lgbm_objective = 'regression'
lgbm_metric = 'rmse'
lgbm_random_state = 42
lgbm_n_jobs = -1
lgbm_model = lgb.LGBMRegressor(
    n_estimators=lgbm_n_estimators,
    learning_rate=lgbm_learning_rate,
    max_depth=lgbm_max_depth,
    num_leaves=lgbm_num_leaves,
    objective=lgbm_objective,
    metric=lgbm_metric,
    random_state=lgbm_random_state,
    n_jobs=lgbm_n_jobs
)
lgbm_model.fit(X_train, y_train)
y_train_pred = lgbm_model.predict(X_train)
y_test_pred = lgbm_model.predict(X_test)
train_mse = mean_squared_error(y_train, y_train_pred)
train_rmse = np.sqrt(train_mse)
train_r2 = r2_score(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)
test_rmse = np.sqrt(test_mse)
test_r2 = r2_score(y_test, y_test_pred)

print(f"Shape of X_train: {X_train.shape}")
print(f"Shape of y_train: {y_train.shape}")
print(f"Shape of X_test: {X_test.shape}")
print(f"Shape of y_test: {y_test.shape}")
print(f"Shape of y_train_pred: {y_train_pred.shape}")
print(f"Shape of y_test_pred: {y_test_pred.shape}")

print("\nPrediction Performance on Training Set:")
print(f"  Mean Squared Error: {train_mse:.4f}")
print(f"  Root Mean Squared Error: {train_rmse:.4f}")
print(f"  R² Score: {train_r2:.4f}")

print("\nPrediction Performance on Test Set:")
print(f"  Mean Squared Error: {test_mse:.4f}")
print(f"  Root Mean Squared Error: {test_rmse:.4f}")
print(f"  R² Score: {test_r2:.4f}")